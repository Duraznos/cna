<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.1.1 (Build 702U)" ts="2014-07-15 15:07:06">
<Class name="CNA.Tests">
<Super>%UnitTest.TestCase</Super>
<TimeChanged>63383,54409.009153</TimeChanged>
<TimeCreated>63383,54409.009153</TimeCreated>

<Method name="TestCNA">
<Implementation><![CDATA[
	try {

		if ($SYSTEM.Version.GetOS() = "UNIX") {
			set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
			set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
		} else {
			set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
			set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
		}

		do $$$AssertEquals(##class(%File).Exists(CNAPath), 1, "CNA file exists")
		do $$$AssertEquals(##class(%File).Exists(testLib), 1, "SQlib file exists")
	
		do $zf(-3, CNAPath)
		
		set libID = $zf(-3, "", "load_library", testLib)
			
		set func = "sum"
		set argTypes = $CHAR(2, 2, 2, 2, 2, 2)
		set args = $ZLCHAR(12, 10, 35, 321, 21)
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal = $ZLASCII(retVal)
		do $$$AssertEquals(retVal, 399, "Check sum() from libsq:12 + 10 + 35 + 321 + 21 = 399")

		set func = "mul"
		set argTypes = $CHAR(5, 7, 7)
		set args = $ZQCHAR(10) _ $ZDCHAR($DOUBLE(1.5))
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal = $ZDASCII(retVal)
		do $$$AssertEquals(retVal, $double(15), "Check mul() from libsq: 10 * 1.5 = 15")

		set func = "x"
		set argTypes = $CHAR(5, 5)
		set args = $ZQCHAR(-2384929929829)
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal =  $ZQASCII(retVal)
		do $$$AssertEquals(retVal, -2384929929829, "Check x() from libsq:")
		
		set func = "square"
		set argTypes = $CHAR(7, 7)
		set args = $ZDCHAR($DOUBLE(1.2))
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal = $ZDASCII(retVal)
		do $$$AssertEquals(retVal, $double(1.44), "Check square() from libsq: 1.2 ^ 2 = 1.44")
		
		do $zf(-3, "", "free_library", libID)
		
		} catch ex {
	
			write $system.Status.GetErrorText(ex.AsStatus(),"ru"),!
			do $zf(-3, "")
	}
]]></Implementation>
</Method>
</Class>
</Export>
