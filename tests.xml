<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.1.1 (Build 702U)" ts="2014-08-04 11:47:25">
<Class name="CNA.Tests">
<Super>%UnitTest.TestCase</Super>
<TimeChanged>63400,67729.70869</TimeChanged>
<TimeCreated>63384,43091.390095</TimeCreated>

<Method name="TestLowLevel">
<Implementation><![CDATA[
	try {
		if ($SYSTEM.Version.GetOS() = "UNIX") {
			set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
			set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
		} else {
			set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
			set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
		}

		do $$$AssertEquals(##class(%File).Exists(CNAPath), 1, "CNA file exists")
		do $$$AssertEquals(##class(%File).Exists(testLib), 1, "SQlib file exists")
	
		do $zf(-3, CNAPath)
		
		set libID = $zf(-3, "", "load_library", testLib)
		
		set func = "sum"
		set argTypes = $CHAR(3, 3, 3, 3, 3, 3)
		set args = $ZLCHAR(12, 10, 35, 321, 21)
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal = $ZLASCII(retVal)
		do $$$AssertEquals(retVal, 399, "Check sum() from libsq: 12 + 10 + 35 + 321 + 21 = 399")
		
		set func = "mul"
		set argTypes = $CHAR(9, 12, 12)
		set args = $ZQCHAR(10) _ $ZDCHAR($DOUBLE(1.5))
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal = $ZDASCII(retVal)
		do $$$AssertEquals(retVal, $double(15), "Check mul() from libsq: 10 * 1.5 = 15")

		set func = "x"
		set argTypes = $CHAR(9, 9)
		set args = $ZQCHAR(-2384929929829)
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal =  $ZQASCII(retVal)
		do $$$AssertEquals(retVal, -2384929929829, "Check x() from libsq:" _ retVal _ " = -2384929929829")
		
		set func = "square"
		set argTypes = $CHAR(12, 12)
		set args = $ZDCHAR($DOUBLE(1.2))
		set retVal = $zf(-3, "", "call_function", libID, func, argTypes, args)
		set retVal = $ZDASCII(retVal)
		do $$$AssertEquals(retVal, $double(1.44), "Check square() from libsq: 1.2 ^ 2 = 1.44")
		
		do $zf(-3, "", "free_library", libID)
		
		} catch ex {
	
			write $system.Status.GetErrorText(ex.AsStatus(),"ru"),!
			do $zf(-3, "")
			do $$$AssertEquals(0, 1, "Exception were catched")
	}
]]></Implementation>
</Method>

<Method name="TestAPI">
<Implementation><![CDATA[
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
		set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
	} else {
		set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
		set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
	}

	
	do $$$AssertEquals(##class(%File).Exists(testLib), 1, "SQlib file exists")

	set cna = ##class(CNA.CNA).%New(CNAPath)
	set st = cna.LoadLibrary(testLib)
	do $$$AssertStatusOK(st, "Load test library")
	
	set argTypes = ##class(%ListOfDataTypes).%New()
	do argTypes.Insert(cna.#INT64)
	do argTypes.Insert(cna.#DOUBLE)
	set st = cna.CallFunction("mul", cna.#DOUBLE, .retVal, argTypes, 10, $double(1.5))
	do $$$AssertStatusOK(st, "Call mul() from test library")
	do $$$AssertEquals(retVal, $double(15), "Check return value of mul()")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#DOUBLE)
	set st = cna.CallFunction("square", cna.#DOUBLE, .retVal, argTypes, $double(12341.12311))
	do $$$AssertStatusOK(st, "Call square() from test library")
	do $$$AssertEquals(retVal, $double(12341.12311) * $double(12341.12311), "Check return value of square()")

	do argTypes.Clear()
	do argTypes.Insert(cna.#UINT)
	do argTypes.Insert(cna.#UINT)
	do argTypes.Insert(cna.#UINT)
	do argTypes.Insert(cna.#UINT)
	do argTypes.Insert(cna.#UINT)
	set st = cna.CallFunction("sum", cna.#UINT, .retVal, argTypes, 1243, 1231, 121, 12123, 121)
	do $$$AssertStatusOK(st, "Call sum() from test library")
	do $$$AssertEquals(retVal, 1243 + 1231 + 121 + 12123 + 121, "Check return value of sum()")

	set st = cna.CallFunction("sum", cna.#UINT, .retVal, argTypes, 1243, -1231, 121, 12123, 121)
	do $$$AssertStatusNotOK(st, "Invalid argument value: -1231 for UINT")

	set st = cna.CallFunction("sum", cna.#UINT, .retVal, argTypes, 12431231231231231231312312, 113, 121, 12123, 121)
	do $$$AssertStatusNotOK(st, "Invalid argument value: 12431231231231231231312312 for UINT")
	
	do argTypes.Clear()
	set st = cna.CallFunction("five", cna.#INT, .retVal, argTypes)
 	do $$$AssertStatusOK(st, "Call five() from test library")
	do $$$AssertEquals(retVal, 5, "Check return value of five()")

	
	set st = cna.FreeLibrary()
	do $$$AssertStatusOK(st, "Free test library")
	set st = cna.LoadLibrary("selfla")
	do $$$AssertStatusNotOK(st, "Fail to load library with wrong path")
]]></Implementation>
</Method>

<Method name="TestHunspell">
<Implementation><![CDATA[
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		//Not implemented yet
		return $$$OK
	} else {
		set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
		set testLib = "C:\Users\dd\Dropbox\is\hunspell\libhunspell.dll"
	}

	
	
	set cna = ##class(CNA.CNA).%New(CNAPath)
	set st = cna.LoadLibrary(testLib)
	do $$$AssertStatusOK(st, "Load Hunspell")
	
	set st =  cna.ConvertStringToPointer("C:\Users\dd\Dropbox\is\hunspell\ru_RU.aff", .aff)
	do $$$AssertStatusOK(st, "Create C-string")
	set st =  cna.ConvertStringToPointer("C:\Users\dd\Dropbox\is\hunspell\ru_RU.dic", .dic)
	do $$$AssertStatusOK(st, "Create C-string")
	
	set argTypes = ##class(%ListOfDataTypes).%New()
	do argTypes.Insert(cna.#POINTER)
	do argTypes.Insert(cna.#POINTER)
	
	set st =  cna.CallFunction("Hunspell_create", cna.#POINTER, .hunspell, argTypes, aff, dic)
	do $$$AssertStatusOK(st, "Hunspell ID")
	
	set st =  cna.ConvertStringToPointer($ZCVT("лымузин", "O", "UTF8"), .bad)
	do $$$AssertStatusOK(st, "Create C-string")
	set st =  cna.ConvertStringToPointer($ZCVT("лимузин", "O", "UTF8"), .good)
	do $$$AssertStatusOK(st, "Create C-string")
	
	set st =  cna.CallFunction("Hunspell_spell", cna.#UINT, .retVal, argTypes, hunspell, bad)
	do $$$AssertStatusOK(st, "Call spell()")
	do $$$AssertEquals(retVal, 0, "Incorrect word")
	
	set st =  cna.CallFunction("Hunspell_spell", cna.#UINT, .retVal, argTypes, hunspell, good)
	do $$$AssertStatusOK(st, "Call spell()")
	do $$$AssertNotEquals(retVal, 0, "Correct word")
	
	set st = cna.FreeLibrary()
	do $$$AssertStatusOK(st, "Free test library")
]]></Implementation>
</Method>

<Method name="TestPointers">
<Implementation><![CDATA[
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
		set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
	} else {
		set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
		set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
	}

	set cna = ##class(CNA.CNA).%New(CNAPath)
	set st = cna.LoadLibrary(testLib)
	do $$$AssertStatusOK(st, "Load sqlib")
	
	set argTypes = ##class(%ListOfDataTypes).%New()
	do argTypes.Insert(cna.#SIZET)
	
	set st = cna.CallFunction("mal", cna.#POINTER, .memory, argTypes, 8)
	do $$$AssertStatusOK(st, "Allocate memory")
	
	set st = cna.PointerSetAt(memory, cna.#UINT, 0, 12345678)
	do $$$AssertStatusOK(st, "Set memory[0] to 12345678")
	
	set st = cna.PointerSetAt(memory, cna.#UINT, 1, 1313)
	do $$$AssertStatusOK(st, "Set memory[1] to 1313")
	
	set st = cna.PointerGetAt(memory, cna.#UINT, 0, .mem0)
	do $$$AssertStatusOK(st, "Get memory[0]")
	do $$$AssertEquals(mem0, 12345678, "memory[0] must be equal to 12345678")
	
	set st = cna.PointerGetAt(memory, cna.#UINT, 1, .mem1)
	do $$$AssertStatusOK(st, "Get memory[1]")
	do $$$AssertEquals(mem1, 1313, "memory[1] must be equal to 1313")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#POINTER)
	
	set st = cna.CallFunction("fr", cna.#VOID, , argTypes, memory)
	do $$$AssertStatusOK(st, "Free memory")
	
	set st = cna.FreeLibrary()
	do $$$AssertStatusOK(st, "Free test library")
]]></Implementation>
</Method>

<Method name="TestIntegers">
<Implementation><![CDATA[
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
		set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
	} else {
		set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
		set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
	}

	
	set cna = ##class(CNA.CNA).%New(CNAPath)
	set st = cna.LoadLibrary(testLib)
	do $$$AssertStatusOK(st, "Load sqlib")

	set argTypes = ##class(%ListOfDataTypes).%New()
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#UCHAR)
	set st = cna.CallFunction("_uchar", cna.#UCHAR, .retVal, argTypes, $zhex("FD"))
	do $$$AssertStatusOK(st, "Call uchar()")
	do $$$AssertEquals(retVal, $zhex("FD"), "Check uchar() return value")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#SCHAR)
	set st = cna.CallFunction("_schar", cna.#SCHAR, .retVal, argTypes, -3)
	do $$$AssertStatusOK(st, "Call schar()")
	do $$$AssertEquals(retVal, -3, "Check schar() return value")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#USHORT)
	set st = cna.CallFunction("_ushort", cna.#USHORT, .retVal, argTypes, $zhex("FFFD"))
	do $$$AssertStatusOK(st, "Call ushort()")
	do $$$AssertEquals(retVal, $zhex("FFFD"), "Check ushort() return value")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#SHORT)
	set st = cna.CallFunction("_sshort", cna.#SHORT, .retVal, argTypes, -3)
	do $$$AssertStatusOK(st, "Call sshort()")
	do $$$AssertEquals(retVal, -3, "Check sshort() return value")

	
	do argTypes.Clear()
	do argTypes.Insert(cna.#UINT)
	set st = cna.CallFunction("_uint", cna.#UINT, .retVal, argTypes, $zhex("FFFFFFFD"))
	do $$$AssertStatusOK(st, "Call uint()")
	do $$$AssertEquals(retVal, $zhex("FFFFFFFD"), "Check uint() return value")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#INT)
	set st = cna.CallFunction("_sint", cna.#INT, .retVal, argTypes, -3)
	do $$$AssertStatusOK(st, "Call sint()")
	do $$$AssertEquals(retVal, -3, "Check sint() return value")

	
	do argTypes.Clear()
	do argTypes.Insert(cna.#ULONG)
	set st = cna.CallFunction("_ulong", cna.#ULONG, .retVal, argTypes, $zhex("FFFFFFFD"))
	do $$$AssertStatusOK(st, "Call ulong()")
	do $$$AssertEquals(retVal, $zhex("FFFFFFFD"), "Check ulong() return value")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#LONG)
	set st = cna.CallFunction("_slong", cna.#LONG, .retVal, argTypes, -3)
	do $$$AssertStatusOK(st, "Call slong()")
	do $$$AssertEquals(retVal, -3, "Check slong() return value")

	
	do argTypes.Clear()
	do argTypes.Insert(cna.#UINT64)
	set st = cna.CallFunction("_uint64", cna.#UINT64, .retVal, argTypes, 1234567890)
	do $$$AssertStatusOK(st, "Call uint64()")
	do $$$AssertEquals(retVal, 1234567890, "Check uint64() return value")
	
	do argTypes.Clear()
	do argTypes.Insert(cna.#INT64)
	set st = cna.CallFunction("_sint64", cna.#INT64, .retVal, argTypes, -3)
	do $$$AssertStatusOK(st, "Call sint64()")
	do $$$AssertEquals(retVal, -3, "Check sint64() return value")
	
	set st = cna.FreeLibrary()
	do $$$AssertStatusOK(st, "Free test library")
]]></Implementation>
</Method>

<Method name="TestStructures">
<Implementation><![CDATA[
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
		set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
	} else {
		set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
		set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
	}


	set cna = ##class(CNA.CNA).%New(CNAPath)
	set st = cna.LoadLibrary(testLib)
	do $$$AssertStatusOK(st, "Load test library")
	
	set argTypes = ##class(%ListOfDataTypes).%New()
	set structType = ##class(%ListOfDataTypes).%New()
	do structType.Insert(cna.#SCHAR)
	do structType.Insert(cna.#INT64)
	do structType.Insert(cna.#SCHAR)
	do argTypes.Insert(structType)
	
	set structVal = ##class(%ListOfDataTypes).%New()
	do structVal.Insert(12)
	do structVal.Insert(2114)
	do structVal.Insert(74)
	
	set st = cna.CallFunction("sum_st", cna.#INT64, .retVal, argTypes, structVal)
	do $$$AssertStatusOK(st, "Call sum_st() from test library")
	do $$$AssertEquals(retVal, 2200, "Check return value of sum_st()")
	
	
	do argTypes.Clear()
	set st = cna.CallFunction("create_st", structType, .retVal, argTypes)
	do $$$AssertStatusOK(st, "Call create_st() from test library")
	do $$$AssertEquals(retVal.GetAt(1), 1, "Check return value of create_st()")
	do $$$AssertEquals(retVal.GetAt(2), 2, "Check return value of create_st()")
	do $$$AssertEquals(retVal.GetAt(3), 3, "Check return value of create_st()")
	
	
	set nestedType = ##class(%ListOfDataTypes).%New()
	do nestedType.Insert(cna.#SCHAR)
	do nestedType.Insert(cna.#INT64)
	do nestedType.Insert(cna.#SCHAR)
	
	do structType.Clear()
	do structType.Insert(cna.#SCHAR)
	do structType.Insert(nestedType)
	do structType.Insert(cna.#SCHAR)
	
	do argTypes.Clear()
	do argTypes.Insert(structType)
	
	set nestedVal = ##class(%ListOfDataTypes).%New()
	do nestedVal.Insert(-14)
	do nestedVal.Insert(33100)
	do nestedVal.Insert(28)
	
	do structVal.Clear()
	do structVal.Insert(12)
	do structVal.Insert(nestedVal)
	do structVal.Insert(74)
	
	
	
	set st = cna.CallFunction("sum_nested", cna.#INT64, .retVal, argTypes, structVal)
	do $$$AssertStatusOK(st, "Call sum_nested() from test library")
	do $$$AssertEquals(retVal, 33200, "Check return value of sum_nested()")
	
		
	set st = cna.FreeLibrary()
	do $$$AssertStatusOK(st, "Free test library")
]]></Implementation>
</Method>

<Method name="TestFloatingPoint">
<Implementation><![CDATA[
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
		set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
	} else {
		set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
		set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
	}


	set cna = ##class(CNA.CNA).%New(CNAPath)
	set st = cna.LoadLibrary(testLib)
	do $$$AssertStatusOK(st, "Load test library")
	
	set argTypes = ##class(%ListOfDataTypes).%New()
	do argTypes.Insert(cna.#FLOAT)
	do argTypes.Insert(cna.#FLOAT)
	set st = cna.CallFunction("sum_float", cna.#FLOAT, .retVal, argTypes, $double(0.2), $double(1.5))
	do $$$AssertStatusOK(st, "Call sum_float() from test library")
	do $$$AssertEquals($zabs(retVal - $double(1.7)) < $double(0.0000001), 1, "Check return value of sum_float()")
	
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		do argTypes.Clear()
		do argTypes.Insert(cna.#LONGDOUBLE)
		do argTypes.Insert(cna.#LONGDOUBLE)
		set st = cna.CallFunction("sum_long_double", cna.#LONGDOUBLE, .retVal, argTypes, $double(0.2), $double(1.5))
		do $$$AssertStatusOK(st, "Call sum_long_double() from test library")
		do $$$AssertEquals(retVal, $double(1.7), "Check return value of sum_long_double()")
	}
	
	set st = cna.FreeLibrary()
	do $$$AssertStatusOK(st, "Free test library")
]]></Implementation>
</Method>

<Method name="TestStreams">
<Implementation><![CDATA[
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		set CNAPath = "/home/dd/Dropbox/is/CNA/libcna.so"
		set testLib = "/home/dd/Dropbox/is/CNA/libsq.so"
	} else {
		set CNAPath = "C:\Users\dd\Dropbox\is\CNA\libcna.dll"
		set testLib = "C:\Users\dd\Dropbox\is\CNA\libsq.dll"			
	}

	set cna = ##class(CNA.CNA).%New(CNAPath)
	set st = cna.LoadLibrary(testLib)
	do $$$AssertStatusOK(st, "Load test library")
	
	set file = ##class(%Stream.FileBinary).%New()
	
	if ($SYSTEM.Version.GetOS() = "UNIX") {
		do file.LinkToFile("home/dd/Dropbox/is/ulysses.txt")
	} else {
		do file.LinkToFile("C:\Users\dd\Dropbox\is\ulysses.txt")			
	}
	
	set st = cna.ConvertStreamToPointer(file, .pointer)
	do $$$AssertStatusOK(st, "Convert Ulysses to pointer")
		
	set argTypes = ##class(%ListOfDataTypes).%New()
	do argTypes.Insert(cna.#POINTER)
	
	set st = cna.CallFunction("compare_string_and_ulysses", cna.#INT, .retVal, argTypes, pointer)
	do $$$AssertStatusOK(st, "Call comapring Ulysses and stream")
	do $$$AssertEquals(retVal, 1, "Check retval")
	
	set st = cna.FreeLibrary()
	do $$$AssertStatusOK(st, "Free test library")
]]></Implementation>
</Method>
</Class>
</Export>
