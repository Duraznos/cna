<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.1.1 (Build 702U)" ts="2014-09-03 16:10:57">
<CSP name="CNARegistryExample.CSP" application="/csp/dev/" default="1"><![CDATA[
<html>
<head>

<title> CNA Registry Example </title>

</head>

<body>
<form action="CNARegistryExample.csp" method="GET">
Subkey of HKEY_CURRENT_USER:<br>
<input type="text" name="subkey" value="#($GET(%request.Data("param", 1)))#"><br>
Parameter:<br>
<input type="text" name="param" value="#($GET(%request.Data("subkey", 1)))#"><br>
Path to libcna.dll:<br>
<input type="text" name="path" value="#($GET(%request.Data("path", 1)))#"><br>
<button type="submit">Get key</button>
</form>
<script language="Cache" runat="server">
if ($Data(%request.Data("subkey", 1)) && $Data(%request.Data("param", 1))) {
	try {

		// Получаем параметры HTTP-запроса
		set CNAPath = %request.Data("path", 1)
		set subkey = %request.Data("subkey", 1)
		set param = %request.Data("param", 1)
		
		// Создаем объект класса CNA и загружаем туда стандартную бибилиотеку C
		set libc = ##class(CNA.CNA).%New(CNAPath)
		do libc.LoadLibrary("C:\Windows\System32\msvcrt.dll")
		
		// Вызываем malloc, чтобы выделить память под буферы, кооторые используются в вызовах WinAPI
		set argTypes = $lb(libc.#SIZET)
		set phkey = libc.CallFunction("malloc", libc.#POINTER, argTypes, 4) 
		set size = 1000
		set valueBuf = libc.CallFunction("malloc", libc.#POINTER, argTypes, size) 
		set sizeBuf = libc.CallFunction("malloc", libc.#POINTER, argTypes, 4)
		do libc.PointerSetAt(sizeBuf, libc.#ULONG, 0, size) 


		// Загружаем в CNA advapi - билиотеку, в которой находятся функции для работы с реестром
		set advapi = ##class(CNA.CNA).%New(CNAPath)
		do advapi.LoadLibrary("C:\Windows\System32\advapi32.dll")

		
		// Открываем ключ HKEY_CURRENT_USER
		// Прототип функции: LONG RegOpenCurrentUser(REGSAM samDesired, PHKEY phkResult);
		// LONG - алиас типа int, REGSAM - long, PHKEY - unsigned long *
		// В первом аргументе передаем права доступа, во втором - указатель на буфер, куда нужно записать дескриптор ключа
		// Константа 0x20019 означает, что мы открываем ключ с правами KEY_READ

		set argTypes = $lb(advapi.#LONG, advapi.#POINTER)
		set res = advapi.CallFunction("RegOpenCurrentUser", advapi.#INT, argTypes, $zhex("20019"), phkey)
		if (res '= 0) {
			w "RegOpenCurrentUset error: " _ res _ "<br>"
			return
		}

		// Получаем значание дескриптора ключа из буфера
		set hkey = advapi.PointerGetAt(phkey, advapi.#ULONG, 0)

		// Получаем значение подключа реестра
		// Прототип функции: LONG RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPWWORD pcbData);
		// hkey - дескриптор ключа, тип unsigned long
		// lpSubKey - строка с именем подключа, тип char *
		// dwFlags - флаг ограничения на тип значения ключа, Oxffff означает, что никаких ограничений нет
		// pdwType - указатель на буфер, куда записывается тип данных этого подключа. Нам это не нужно, поэтому передаем NULL
		// pvData - указатель на буфер, куда записывается искомое значение
		// pcbData - указатель на переменную, где хранится размер буфера pvData

		set argTypes = $lb(advapi.#ULONG, advapi.#POINTER, advapi.#POINTER, advapi.#ULONG, advapi.#POINTER, advapi.#POINTER, advapi.#POINTER)
		set pSubkey = advapi.ConvertStringToPointer(subkey)
		set pParam = advapi.ConvertStringToPointer(param)
		set res = advapi.CallFunction("RegGetValueA", advapi.#LONG, argTypes, hkey, pSubkey, pParam, $zhex("ffff"), advapi.NULL, valueBuf, sizeBuf)

		if (res = 0) {
			w advapi.ConvertPointerToString(valueBuf), "<br>"
		} else {
			w "<b><font color='red'>RegGetValue Error: " _ res _ "</font></b>"
		}


		// Выгружаем библиотеки и освобождаем выделенную память
		do advapi.FreeLibrary()
		set argTypes = $lb(libc.#POINTER)
		do libc.CallFunction("free", libc.#VOID, argTypes, phkey)
		do libc.CallFunction("free", libc.#VOID, argTypes, valueBuf) 
		do libc.CallFunction("free", libc.#VOID, argTypes, sizeBuf) 
		do libc.FreeLibrary()
	} catch ex {
		w "<b><font color='red'>"
		w $system.Status.GetErrorText(ex.AsStatus())
		w "</font></b>"
	}
}
</script>
</body>
</html>
]]></CSP>
</Export>
